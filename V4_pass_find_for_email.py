import random
import string
import sys
import time 
from time import sleep
import webbrowser
import threading
from colorama import Fore, Back, Style 
from colorama import init
init()
import os
import queue
from queue import *

# How to run the program https://www.youtube.com/watch?v=pFYcAOsNyvs

import random
import string
import sys
import time 
from time import sleep
import webbrowser
import threading
from colorama import Fore, Back, Style 
from colorama import init
init()
import os
import queue
from queue import *

exitFlag = 0

class myThread (threading.Thread):
   def __init__(self, threadID, name, q):
      threading.Thread.__init__(self)
      self.threadID = threadID
      self.name = name
      self.q = q
   def run(self):
      print ("Starting " + self.name)

def process_data(threadName, q):
   while not exitFlag:
      queueLock.acquire()
      if not workQueue.empty():
         data = q.get()
         queueLock.release()
         print ("%s processing %s" % (threadName, data))
      else:
         queueLock.release()
         time.sleep(1)

threadList = ["Thread-1", "Thread-2", "Thread-3"]
nameList = ["One", "Two", "Three", "Four", "Five"]
queueLock = threading.Lock()
workQueue = queue.Queue(10)
threads = []
threadID = 1

# Create new threads
for tName in threadList:
   thread = myThread(threadID, tName, workQueue)
   thread.start()
   threads.append(thread)
   threadID += 1

time.sleep(.25)
print("")
print("threads suscessfully loaded!")
time.sleep(.25)
      
def cls():
    os.system('cls' if os.name=='nt' else 'clear')
cls()

def prCyan(skk): print("\033[96m {}\033[00m" .format(skk))
def prYellow(skk): print("\033[93m {}\033[00m" .format(skk))
def prGreen(skk): print("\033[92m {}\033[00m" .format(skk))
prCyan("   _            ________   ________    ________ ")
prCyan("  /    |    |   |          |           |       |")
prCyan(" |     |    |   |          |           |       |")
prCyan("  \    |____|   |____      |____       |_______|")
prCyan("   \   |    |   |          |           |")
prCyan("   /   |    |   |          |           |")
prCyan(" _/    |    |   |________  |________   |")
time.sleep(.5)
print("")
prGreen("Please wait...")
time.sleep(.25)
prGreen("checking for new updates...")
time.sleep(.75)
prGreen("found new update")
time.sleep(.5)
prGreen("downloading new update...")
time.sleep(.5)
def cls():
    os.system('cls' if os.name=='nt' else 'clear')
cls()
prYellow("8%  |█         |")
time.sleep(.44)
def cls():
    os.system('cls' if os.name=='nt' else 'clear')
cls()
prYellow("23% |██        |")
time.sleep(.58)
def cls():
    os.system('cls' if os.name=='nt' else 'clear')
cls()
prYellow("27% |███       |")
time.sleep(.37)
def cls():
    os.system('cls' if os.name=='nt' else 'clear')
cls()
prYellow("39% |████      |")
time.sleep(.19)
def cls():
    os.system('cls' if os.name=='nt' else 'clear')
cls()
prYellow("48% |█████     |")
time.sleep(1)
def cls():
    os.system('cls' if os.name=='nt' else 'clear')
cls()
prYellow("100%|██████████|")
time.sleep(.5)
def cls():
    os.system('cls' if os.name=='nt' else 'clear')
cls()
prCyan("   _            ________   ________    ________ ")
prCyan("  /    |    |   |          |           |       |")
prCyan(" |     |    |   |          |           |       |")
prCyan("  \    |____|   |____      |____       |_______|")
prCyan("   \   |    |   |          |           |")
prCyan("   /   |    |   |          |           |")
prCyan(" _/    |    |   |________  |________   |")
time.sleep(.1)
print("")
prGreen("loading libraries...")
time.sleep(.5)
print("")

val = input("Enter how many passwords you want to generate: ")
while int(val) < 200:
    print(Fore.RED + "please enter a number bigger then 200 please")
    val = input(Fore.WHITE + "Enter how many passwords you want to generate: ")
print("")

email = input("Enter the email you want to generate the passwords for: ")
fullstring = (email)
substring = "@"
if fullstring.find(substring) != -1:
    print("")  
else:
    print(Fore.RED + "please include a valid email ex. email@gmail.com")
    email = input(Fore.WHITE + "Enter the email you want to generate the passwords for: ")
    print("")

print(Fore.RED + "the file name should be ex.", Fore.BLUE + "password", Fore.RED + "you do not need to put in the directory like C:/User/Desktop, this will be saved to what folder you put your program in")
time.sleep(1)
output = input(Fore.WHITE + "what do you want your output file to be? (do not include file extention): ")
fullstring = (output)
substring = "."
if fullstring.find(substring) != -1:
    print(Fore.RED + "please do not include a extention like .txt")
    output = input(Fore.WHITE + "what do you want your output file to be? (do not include file extention): ")
print("")

print("1. Yes")
print("2. No")
oi = int(input("would you like special characters in your passwords? (1 or 2): "))
while int(oi) > 2:
    print("")
    print("sorry didnt get that, 1 or 2")
    oi = int(input("would you like special characters in your passwords? (1 or 2): "))
while int(oi) < 1:
    print("")
    print("sorry didnt get that, 1 or 2")
    oi = int(input("would you like special characters in your passwords? (1 or 2): "))
    
print("")
print(Fore.GREEN + "generating ", Fore.BLUE + (val), Fore.GREEN + " password(s) with ", Fore.BLUE + "No", Fore.GREEN + " special characters, and using ", Fore.BLUE + (email), Fore.GREEN + " as the email, find your output file in ",Fore.BLUE + (output),".txt",sep="")
print(Fore.BLACK + "")
print("")

webbrowser.open('https://www.youtube.com/c/HardMineSheep?sub_confirmation=1')
time.sleep(1)
print(Style.RESET_ALL)
print("")
    
x = (output)
y = (".txt")
z = (x + y)

print("program started... please wait...")

original_stdout = sys.stdout

with open((z), 'a',) as f:
    sys.stdout = f
    print("   _            ________   ________    ________ ")
    print("  /    |    |   |          |           |       |")
    print(" |     |    |   |          |           |       |")
    print("  \    |____|   |____      |____       |_______|")
    print("   \   |    |   |          |           |")
    print("   /   |    |   |          |           |")
    print(" _/    |    |   |________  |________   |")
    print("")
    print("sheep generated passwords")
    print("")
    print("discord: !a MineSheep#0334")
    print("dm for download ^^^")
    print("https://www.youtube.com/c/HardMineSheep")
    print("")
    print("")
    sys.stdout = original_stdout

startTime = time.time()
with open((z), 'a',) as f:
    sys.stdout = f
    print((email),":123456",sep="")
    print((email),":123456789",sep="")
    print((email),":picture1",sep="")
    print((email),":password",sep="")
    print((email),":12345678",sep="")
    print((email),":111111",sep="")
    print((email),":123123",sep="")
    print((email),":12345",sep="")
    print((email),":1234567890",sep="")
    print((email),":senha",sep="")
    print((email),":1234567",sep="")
    print((email),":qwerty",sep="")
    print((email),":abc123",sep="")
    print((email),":Million2",sep="")
    print((email),":000000",sep="")
    print((email),":1234",sep="")
    print((email),":iloveyou",sep="")
    print((email),":aaron431",sep="")
    print((email),":password1",sep="")
    print((email),":qqww1122",sep="")
    print((email),":123",sep="")
    print((email),":omgpop",sep="")
    print((email),":123321",sep="")
    print((email),":654321",sep="")
    print((email),":qwertyuiop",sep="")
    print((email),":qwer123456",sep="")
    print((email),":123456a",sep="")
    print((email),":a123456",sep="")
    print((email),":666666",sep="")
    print((email),":asdfghjkl",sep="")
    print((email),":ashley",sep="")
    print((email),":987654321",sep="")
    print((email),":unknown",sep="")
    print((email),":zxcvbnm",sep="")
    print((email),":112233",sep="")
    print((email),":chatbooks",sep="")
    print((email),":20100728",sep="")
    print((email),":123123123",sep="")
    print((email),":princess",sep="")
    print((email),":jacket025",sep="")
    print((email),":evite",sep="")
    print((email),":123abc",sep="")
    print((email),":123qwe",sep="")
    print((email),":sunshine",sep="")
    print((email),":121212",sep="")
    print((email),":dragon",sep="")
    print((email),":1q2w3e4r",sep="")
    print((email),":5201314",sep="")
    print((email),":159753",sep="")
    print((email),":0123456789",sep="")
    print((email),":pokemon",sep="")
    print((email),":qwerty123",sep="")
    print((email),":Bangbang123",sep="")
    print((email),":jobandtalent",sep="")
    print((email),":monkey",sep="")
    print((email),":1qaz2wsx",sep="")
    print((email),":abcd1234",sep="")
    print((email),":default",sep="")
    print((email),":aaaaaa",sep="")
    print((email),":soccer",sep="")
    print((email),":123654",sep="")
    print((email),":ohmnamah23",sep="")
    print((email),":12345678910",sep="")
    print((email),":zing",sep="")
    print((email),":shadow",sep="") 
    print((email),":102030",sep="")
    print((email),":11111111",sep="")
    print((email),":asdfgh",sep="")
    print((email),":147258369",sep="")
    print((email),":qazwsx",sep="")
    print((email),":qwe123",sep="")
    print((email),":michael",sep="")
    print((email),":football",sep="")   
    print((email),":baseball",sep="")
    print((email),":1q2w3e4r5t",sep="")
    print((email),":party",sep="")
    print((email),":daniel",sep="")
    print((email),":asdasd",sep="")
    print((email),":222222",sep="")
    print((email),":myspace1",sep="")
    print((email),":asd123",sep="")
    print((email),":555555",sep="")
    print((email),":a123456789",sep="")
    print((email),":888888",sep="")
    print((email),":7777777",sep="")
    print((email),":fuckyou",sep="")
    print((email),":1234qwer",sep="")
    print((email),":superman",sep="")
    print((email),":147258",sep="")
    print((email),":999999",sep="")
    print((email),":159357",sep="")
    print((email),":love123",sep="")
    print((email),":tigger",sep="")
    print((email),":purple",sep="") 
    print((email),":samantha",sep="")
    print((email),":charlie",sep="")
    print((email),":babygirl",sep="")
    print((email),":88888888",sep="")
    print((email),":jordan23",sep="")
    print((email),":789456123",sep="")
    print((email),":jordan",sep="")
    print((email),":anhyeuem",sep="")
    print((email),":killer",sep="")
    print((email),":basketball",sep="")
    print((email),":michelle",sep="")   
    print((email),":1q2w3e",sep="")
    print((email),":lol123",sep="")   
    print((email),":qwerty1",sep="")
    print((email),":789456",sep="")
    print((email),":6655321",sep="")
    print((email),":nicole",sep="")
    print((email),":naruto",sep="")
    print((email),":master",sep="")
    print((email),":chocolate",sep="")
    print((email),":maggie",sep="")
    print((email),":computer",sep="")
    print((email),":hannah",sep="")
    print((email),":jessica",sep="")
    print((email),":123456789a",sep="")
    print((email),":password123",sep="")
    print((email),":hunter",sep="")
    print((email),":686584",sep="")
    print((email),":iloveyou1",sep="")
    print((email),":987654321",sep="")
    print((email),":justin",sep="")
    print((email),":cookie",sep="")
    print((email),":hello",sep="")
    print((email),":blink182",sep="")
    print((email),":andrew",sep="")
    print((email),":25251325",sep="")
    print((email),":love",sep="")
    print((email),":987654",sep="")
    print((email),":bailey",sep="")
    print((email),":princess1",sep="")
    print((email),":0123456",sep="")
    print((email),":101010",sep="")
    print((email),":12341234",sep="")
    print((email),":a801016",sep="")
    print((email),":1111",sep="")
    print((email),":1111111",sep="")   
    print((email),":anthony",sep="")
    print((email),":yugioh",sep="")
    print((email),":fuckyou1",sep="")
    print((email),":amanda",sep="")
    print((email),":asdf1234",sep="")
    print((email),":trustno1",sep="")
    print((email),":butterfly",sep="")
    print((email),":x4ivygA51F",sep="")
    print((email),":iloveu",sep="")
    print((email),":batman",sep="")
    print((email),":starwars",sep="")
    print((email),":summer",sep="")
    print((email),":michael1",sep="")
    print((email),":00000000",sep="")
    print((email),":lovely",sep="")
    print((email),":jakcgt333",sep="")
    print((email),":buster",sep="")
    print((email),":jennifer",sep="")
    print((email),":babygirl1",sep="")
    print((email),":family",sep="")
    print((email),":456789",sep="")
    print((email),":azerty",sep="")
    print((email),":andrea",sep="")
    print((email),":q1w2e3r4",sep="")
    print((email),":qwer1234",sep="")
    print((email),":hello123",sep="")
    print((email),":10203",sep="")
    print((email),":matthew",sep="")
    print((email),":pepper",sep="")
    print((email),":12345a",sep="")
    print((email),":letmein",sep="")
    print((email),":joshua",sep="")
    print((email),":131313",sep="")
    print((email),":123456b",sep="")
    print((email),":madison",sep="")
    print((email),":Sample123",sep="")
    print((email),":777777",sep="")
    print((email),":football1",sep="")
    print((email),":jesus1",sep="")
    print((email),":taylor",sep="")
    print((email),":b123456",sep="")
    print((email),":whatever",sep="")
    print((email),":welcome",sep="")
    print((email),":ginger",sep="")
    print((email),":flower",sep="")
    print((email),":333333",sep="")   
    print((email),":1111111111",sep="")
    print((email),":robert",sep="")
    print((email),":samsung",sep="")
    print((email),":a12345",sep="")
    print((email),":loveme",sep="")
    print((email),":gabriel",sep="")
    print((email),":alexander",sep="")
    print((email),":cheese",sep="")
    print((email),":passw0rd",sep="")
    print((email),":142536",sep="")
    print((email),":peanut",sep="")
    print((email),":11223344",sep="")
    print((email),":thomas",sep="")
    print((email),":angel1",sep="")
    sys.stdout = original_stdout
    
nouns = [
    'people',
    'history',
    'way',
    'art',
    'world',
    'information',
    'map',
    'two',
    'family',
    'government',
    'health',
    'system',
    'computer',
    'meat',
    'year',
    'thanks',
    'music',
    'person',
    'reading',
    'method',
    'data',
    'food',
    'understanding',
    'theory',
    'law',
    'bird',
    'literature',
    'problem',
    'software',
    'control',
    'knowledge',
    'power',
    'ability',
    'economics',
    'love',
    'internet',
    'television',
    'science',
    'library',
    'nature',
    'fact',
    'product',
    'idea',
    'temperature',
    'investment',
    'area',
    'society',
    'activity',
    'story',
    'industry',
    'media',
    'thing',
    'oven',
    'community',
    'definition',
    'safety',
    'quality',
    'development',
    'language',
    'management',
    'player',
    'variety',
    'video',
    'week',
    'security',
    'country',
    'exam',
    'movie',
    'organization',
    'equipment',
    'physics',
    'analysis',
    'policy',
    'series',
    'thought',
    'basis',
    'boyfriend',
    'direction',
    'strategy',
    'technology',
    'army',
    'camera',
    'freedom',
    'paper',
    'environment',
    'child',
    'instance',
    'month',
    'truth',
    'marketing',
    'university',
    'writing',
    'article',
    'department',
    'difference',
    'goal',
    'news',
    'audience',
    'fishing',
    'growth',
    'income',
    'marriage',
    'user',
    'combination',
    'failure',
    'meaning',
    'medicine',
    'philosophy',
    'teacher',
    'communication',
    'night',
    'chemistry',
    'disease',
    'disk',
    'energy',
    'nation',
    'road',
    'role',
    'soup',
    'advertising',
    'location',
    'success',
    'addition',
    'apartment',
    'education',
    'math',
    'moment',
    'painting',
    'politics',
    'attention',
    'decision',
    'event',
    'property',
    'shopping',
    'student',
    'wood',
    'competition',
    'distribution',
    'entertainment',
    'office',
    'population',
    'president',
    'unit',
    'category',
    'cigarette',
    'context',
    'introduction',
    'opportunity',
    'performance',
    'driver',
    'flight',
    'length',
    'magazine',
    'newspaper',
    'relationship',
    'teaching',
    'cell',
    'dealer',
    'debate',
    'finding',
    'lake',
    'member',
    'message',
    'phone',
    'scene',
    'appearance',
    'association',
    'concept',
    'customer',
    'death',
    'discussion',
    'housing',
    'inflation',
    'insurance',
    'mood',
    'woman',
    'advice',
    'blood',
    'effort',
    'expression',
    'importance',
    'opinion',
    'payment',
    'reality',
    'responsibility',
    'situation',
    'skill',
    'statement',
    'wealth',
    'application',
    'city',
    'county',
    'depth',
    'estate',
    'foundation',
    'grandmother',
    'heart',
    'perspective',
    'photo',
    'recipe',
    'studio',
    'topic',
    'collection',
    'depression',
    'imagination',
    'passion',
    'percentage',
    'resource',
    'setting',
    'ad',
    'agency',
    'college',
    'connection',
    'criticism',
    'debt',
    'description',
    'memory',
    'patience',
    'secretary',
    'solution',
    'administration',
    'aspect',
    'attitude',
    'director',
    'personality',
    'psychology',
    'recommendation',
    'response',
    'selection',
    'storage',
    'version',
    'alcohol',
    'argument',
    'complaint',
    'contract',
    'emphasis',
    'highway',
    'loss',
    'membership',
    'possession',
    'preparation',
    'steak',
    'union',
    'agreement',
    'cancer',
    'currency',
    'employment',
    'engineering',
    'entry',
    'interaction',
    'limit',
    'mixture',
    'preference',
    'region',
    'republic',
    'seat',
    'tradition',
    'virus',
    'actor',
    'classroom',
    'delivery',
    'device',
    'difficulty',
    'drama',
    'election',
    'engine',
    'football',
    'guidance',
    'hotel',
    'match',
    'owner',
    'priority',
    'protection',
    'suggestion',
    'tension',
    'variation',
    'anxiety',
    'atmosphere',
    'awareness',
    'bread',
    'climate',
    'comparison',
    'confusion',
    'construction',
    'elevator',
    'emotion',
    'employee',
    'employer',
    'guest',
    'height',
    'leadership',
    'mall',
    'manager',
    'operation',
    'recording',
    'respect',
    'sample',
    'transportation',
    'boring',
    'charity',
    'cousin',
    'disaster',
    'editor',
    'efficiency',
    'excitement',
    'extent',
    'feedback',
    'guitar',
    'homework',
    'leader',
    'mom',
    'outcome',
    'permission',
    'presentation',
    'promotion',
    'reflection',
    'refrigerator',
    'resolution',
    'revenue',
    'session',
    'singer',
    'tennis',
    'basket',
    'bonus',
    'cabinet',
    'childhood',
    'church',
    'clothes',
    'coffee',
    'dinner',
    'drawing',
    'hair',
    'hearing',
    'initiative',
    'judgment',
    'lab',
    'measurement',
    'mode',
    'mud',
    'orange',
    'poetry',
    'police',
    'possibility',
    'procedure',
    'queen',
    'ratio',
    'relation',
    'restaurant',
    'satisfaction',
    'sector',
    'signature',
    'significance',
    'song',
    'tooth',
    'town',
    'vehicle',
    'volume',
    'wife',
    'accident',
    'airport',
    'appointment',
    'arrival',
    'assumption',
    'baseball',
    'chapter',
    'committee',
    'conversation',
    'database',
    'enthusiasm',
    'error',
    'explanation',
    'farmer',
    'gate',
    'girl',
    'hall',
    'historian',
    'hospital',
    'injury',
    'instruction',
    'maintenance',
    'manufacturer',
    'meal',
    'perception',
    'pie',
    'poem',
    'presence',
    'proposal',
    'reception',
    'replacement',
    'revolution',
    'river',
    'son',
    'speech',
    'tea',
    'village',
    'warning',
    'winner',
    'worker',
    'writer',
    'assistance',
    'breath',
    'buyer',
    'chest',
    'chocolate',
    'conclusion',
    'contribution',
    'cookie',
    'courage',
    'dad',
    'desk',
    'drawer',
    'establishment',
    'examination',
    'garbage',
    'grocery',
    'honey',
    'impression',
    'improvement',
    'independence',
    'insect',
    'inspection',
    'inspector',
    'king',
    'ladder',
    'menu',
    'penalty',
    'piano',
    'potato',
    'profession',
    'professor',
    'quantity',
    'reaction',
    'requirement',
    'salad',
    'sister',
    'supermarket',
    'tongue',
    'weakness',
    'wedding',
    'affair',
    'ambition',
    'analyst',
    'apple',
    'assignment',
    'assistant',
    'bathroom',
    'bedroom',
    'beer',
    'birthday',
    'celebration',
    'championship',
    'cheek',
    'client',
    'consequence',
    'departure',
    'diamond',
    'dirt',
    'ear',
    'fortune',
    'friendship',
    'funeral',
    'gene',
    'girlfriend',
    'hat',
    'indication',
    'intention',
    'lady',
    'midnight',
    'negotiation',
    'obligation',
    'passenger',
    'pizza',
    'platform',
    'poet',
    'pollution',
    'recognition',
    'reputation',
    'shirt',
    'sir',
    'speaker',
    'stranger',
    'surgery',
    'sympathy',
    'tale',
    'throat',
    'trainer',
    'uncle',
    'youth',
    'time',
    'work',
    'film',
    'water',
    'money',
    'example',
    'while',
    'business',
    'study',
    'game',
    'life',
    'form',
    'air',
    'day',
    'place',
    'number',
    'part',
    'field',
    'fish',
    'back',
    'process',
    'heat',
    'hand',
    'experience',
    'job',
    'book',
    'end',
    'point',
    'type',
    'home',
    'economy',
    'value',
    'body',
    'market',
    'guide',
    'interest',
    'state',
    'radio',
    'course',
    'company',
    'price',
    'size',
    'card',
    'list',
    'mind',
    'trade',
    'line',
    'care',
    'group',
    'risk',
    'word',
    'fat',
    'force',
    'key',
    'light',
    'training',
    'name',
    'school',
    'top',
    'amount',
    'level',
    'order',
    'practice',
    'research',
    'sense',
    'service',
    'piece',
    'web',
    'boss',
    'sport',
    'fun',
    'house',
    'page',
    'term',
    'test',
    'answer',
    'sound',
    'focus',
    'matter',
    'kind',
    'soil',
    'board',
    'oil',
    'picture',
    'access',
    'garden',
    'range',
    'rate',
    'reason',
    'future',
    'site',
    'demand',
    'exercise',
    'image',
    'case',
    'cause',
    'coast',
    'action',
    'age',
    'bad',
    'boat',
    'record',
    'result',
    'section',
    'building',
    'mouse',
    'cash',
    'class',
    'nothing',
    'period',
    'plan',
    'store',
    'tax',
    'side',
    'subject',
    'space',
    'rule',
    'stock',
    'weather',
    'chance',
    'figure',
    'man',
    'model',
    'source',
    'beginning',
    'earth',
    'program',
    'chicken',
    'design',
    'feature',
    'head',
    'material',
    'purpose',
    'question',
    'rock',
    'salt',
    'act',
    'birth',
    'car',
    'dog',
    'object',
    'scale',
    'sun',
    'note',
    'profit',
    'rent',
    'speed',
    'style',
    'war',
    'bank',
    'craft',
    'half',
    'inside',
    'outside',
    'standard',
    'bus',
    'exchange',
    'eye',
    'fire',
    'position',
    'pressure',
    'stress',
    'advantage',
    'benefit',
    'box',
    'frame',
    'issue',
    'step',
    'cycle',
    'face',
    'item',
    'metal',
    'paint',
    'review',
    'room',
    'screen',
    'structure',
    'view',
    'account',
    'ball',
    'discipline',
    'medium',
    'share',
    'balance',
    'bit',
    'black',
    'bottom',
    'choice',
    'gift',
    'impact',
    'machine',
    'shape',
    'tool',
    'wind',
    'address',
    'average',
    'career',
    'culture',
    'morning',
    'pot',
    'sign',
    'table',
    'task',
    'condition',
    'contact',
    'credit',
    'egg',
    'hope',
    'ice',
    'network',
    'north',
    'square',
    'attempt',
    'date',
    'effect',
    'link',
    'post',
    'star',
    'voice',
    'capital',
    'challenge',
    'friend',
    'self',
    'shot',
    'brush',
    'couple',
    'exit',
    'front',
    'function',
    'lack',
    'living',
    'plant',
    'plastic',
    'spot',
    'summer',
    'taste',
    'theme',
    'track',
    'wing',
    'brain',
    'button',
    'click',
    'desire',
    'foot',
    'gas',
    'influence',
    'notice',
    'rain',
    'wall',
    'base',
    'damage',
    'distance',
    'feeling',
    'pair',
    'savings',
    'staff',
    'sugar',
    'target',
    'text',
    'animal',
    'author',
    'budget',
    'discount',
    'file',
    'ground',
    'lesson',
    'minute',
    'officer',
    'phase',
    'reference',
    'register',
    'sky',
    'stage',
    'stick',
    'title',
    'trouble',
    'bowl',
    'bridge',
    'campaign',
    'character',
    'club',
    'edge',
    'evidence',
    'fan',
    'letter',
    'lock',
    'maximum',
    'novel',
    'option',
    'pack',
    'park',
    'plenty',
    'quarter',
    'skin',
    'sort',
    'weight',
    'baby',
    'background',
    'carry',
    'dish',
    'factor',
    'fruit',
    'glass',
    'joint',
    'master',
    'muscle',
    'red',
    'strength',
    'traffic',
    'trip',
    'vegetable',
    'appeal',
    'chart',
    'gear',
    'ideal',
    'kitchen',
    'land',
    'log',
    'mother',
    'net',
    'party',
    'principle',
    'relative',
    'sale',
    'season',
    'signal',
    'spirit',
    'street',
    'tree',
    'wave',
    'belt',
    'bench',
    'commission',
    'copy',
    'drop',
    'minimum',
    'path',
    'progress',
    'project',
    'sea',
    'south',
    'status',
    'stuff',
    'ticket',
    'tour',
    'angle',
    'blue',
    'breakfast',
    'confidence',
    'daughter',
    'degree',
    'doctor',
    'dot',
    'dream',
    'duty',
    'essay',
    'father',
    'fee',
    'finance',
    'hour',
    'juice',
    'luck',
    'milk',
    'mouth',
    'peace',
    'pipe',
    'stable',
    'storm',
    'substance',
    'team',
    'trick',
    'afternoon',
    'bat',
    'beach',
    'blank',
    'catch',
    'chain',
    'consideration',
    'cream',
    'crew',
    'detail',
    'gold',
    'interview',
    'kid',
    'mark',
    'mission',
    'pain',
    'pleasure',
    'score',
    'screw',
    'sex',
    'shop',
    'shower',
    'suit',
    'tone',
    'window',
    'agent',
    'band',
    'bath',
    'block',
    'bone',
    'calendar',
    'candidate',
    'cap',
    'coat',
    'contest',
    'corner',
    'court',
    'cup',
    'district',
    'door',
    'east',
    'finger',
    'garage',
    'guarantee',
    'hole',
    'hook',
    'implement',
    'layer',
    'lecture',
    'lie',
    'manner',
    'meeting',
    'nose',
    'parking',
    'partner',
    'profile',
    'rice',
    'routine',
    'schedule',
    'swimming',
    'telephone',
    'tip',
    'winter',
    'airline',
    'bag',
    'battle',
    'bed',
    'bill',
    'bother',
    'cake',
    'code',
    'curve',
    'designer',
    'dimension',
    'dress',
    'ease',
    'emergency',
    'evening',
    'extension',
    'farm',
    'fight',
    'gap',
    'grade',
    'holiday',
    'horror',
    'horse',
    'host',
    'husband',
    'loan',
    'mistake',
    'mountain',
    'nail',
    'noise',
    'occasion',
    'package',
    'patient',
    'pause',
    'phrase',
    'proof',
    'race',
    'relief',
    'sand',
    'sentence',
    'shoulder',
    'smoke',
    'stomach',
    'string',
    'tourist',
    'towel',
    'vacation',
    'west',
    'wheel',
    'wine',
    'arm',
    'aside',
    'associate',
    'bet',
    'blow',
    'border',
    'branch',
    'breast',
    'brother',
    'buddy',
    'bunch',
    'chip',
    'coach',
    'cross',
    'document',
    'draft',
    'dust',
    'expert',
    'floor',
    'god',
    'golf',
    'habit',
    'iron',
    'judge',
    'knife',
    'landscape',
    'league',
    'mail',
    'mess',
    'native',
    'opening',
    'parent',
    'pattern',
    'pin',
    'pool',
    'pound',
    'request',
    'salary',
    'shame',
    'shelter',
    'shoe',
    'silver',
    'tackle',
    'tank',
    'trust',
    'assist',
    'bake',
    'bar',
    'bell',
    'bike',
    'blame',
    'boy',
    'brick',
    'chair',
    'closet',
    'clue',
    'collar',
    'comment',
    'conference',
    'devil',
    'diet',
    'fear',
    'fuel',
    'glove',
    'jacket',
    'lunch',
    'monitor',
    'mortgage',
    'nurse',
    'pace',
    'panic',
    'peak',
    'plane',
    'reward',
    'row',
    'sandwich',
    'shock',
    'spite',
    'spray',
    'surprise',
    'till',
    'transition',
    'weekend',
    'welcome',
    'yard',
    'alarm',
    'bend',
    'bicycle',
    'bite',
    'blind',
    'bottle',
    'cable',
    'candle',
    'clerk',
    'cloud',
    'concert',
    'counter',
    'flower',
    'grandfather',
    'harm',
    'knee',
    'lawyer',
    'leather',
    'load',
    'mirror',
    'neck',
    'pension',
    'plate',
    'purple',
    'ruin',
    'ship',
    'skirt',
    'slice',
    'snow',
    'specialist',
    'stroke',
    'switch',
    'trash',
    'tune',
    'zone',
    'anger',
    'award',
    'bid',
    'bitter',
    'boot',
    'bug',
    'camp',
    'candy',
    'carpet',
    'cat',
    'champion',
    'channel',
    'clock',
    'comfort',
    'cow',
    'crack',
    'engineer',
    'entrance',
    'fault',
    'grass',
    'guy',
    'hell',
    'highlight',
    'incident',
    'island',
    'joke',
    'jury',
    'leg',
    'lip',
    'mate',
    'motor',
    'nerve',
    'passage',
    'pen',
    'pride',
    'priest',
    'prize',
    'promise',
    'resident',
    'resort',
    'ring',
    'roof',
    'rope',
    'sail',
    'scheme',
    'script',
    'sock',
    'station',
    'toe',
    'tower',
    'truck',
    'witness',
    'a',
    'you',
    'it',
    'can',
    'will',
    'if',
    'one',
    'many',
    'most',
    'other',
    'use',
    'make',
    'good',
    'look',
    'help',
    'go',
    'great',
    'being',
    'few',
    'might',
    'still',
    'public',
    'read',
    'keep',
    'start',
    'give',
    'human',
    'local',
    'general',
    'she',
    'specific',
    'long',
    'play',
    'feel',
    'high',
    'tonight',
    'put',
    'common',
    'set',
    'change',
    'simple',
    'past',
    'big',
    'possible',
    'particular',
    'today',
    'major',
    'personal',
    'current',
    'national',
    'cut',
    'natural',
    'physical',
    'show',
    'try',
    'check',
    'second',
    'call',
    'move',
    'pay',
    'let',
    'increase',
    'single',
    'individual',
    'turn',
    'ask',
    'buy',
    'guard',
    'hold',
    'main',
    'offer',
    'potential',
    'professional',
    'international',
    'travel',
    'cook',
    'alternative',
    'following',
    'special',
    'working',
    'whole',
    'dance',
    'excuse',
    'cold',
    'commercial',
    'low',
    'purchase',
    'deal',
    'primary',
    'worth',
    'fall',
    'necessary',
    'positive',
    'produce',
    'search',
    'present',
    'spend',
    'talk',
    'creative',
    'tell',
    'cost',
    'drive',
    'green',
    'support',
    'glad',
    'remove',
    'return',
    'run',
    'complex',
    'due',
    'effective',
    'middle',
    'regular',
    'reserve',
    'independent',
    'leave',
    'original',
    'reach',
    'rest',
    'serve',
    'watch',
    'beautiful',
    'charge',
    'active',
    'break',
    'negative',
    'safe',
    'stay',
    'visit',
    'visual',
    'affect',
    'cover',
    'report',
    'rise',
    'walk',
    'white',
    'beyond',
    'junior',
    'pick',
    'unique',
    'anything',
    'classic',
    'final',
    'lift',
    'mix',
    'private',
    'stop',
    'teach',
    'western',
    'concern',
    'familiar',
    'fly',
    'official',
    'broad',
    'comfortable',
    'gain',
    'maybe',
    'rich',
    'save',
    'stand',
    'young',
    'heavy',
    'hello',
    'lead',
    'listen',
    'valuable',
    'worry',
    'handle',
    'leading',
    'meet',
    'release',
    'sell',
    'finish',
    'normal',
    'press',
    'ride',
    'secret',
    'spread',
    'spring',
    'tough',
    'wait',
    'brown',
    'deep',
    'display',
    'flow',
    'hit',
    'objective',
    'shoot',
    'touch',
    'cancel',
    'chemical',
    'cry',
    'dump',
    'extreme',
    'push',
    'conflict',
    'eat',
    'fill',
    'formal',
    'jump',
    'kick',
    'opposite',
    'pass',
    'pitch',
    'remote',
    'total',
    'treat',
    'vast',
    'abuse',
    'beat',
    'burn',
    'deposit',
    'print',
    'raise',
    'sleep',
    'somewhere',
    'advance',
    'anywhere',
    'consist',
    'dark',
    'double',
    'draw',
    'equal',
    'fix',
    'hire',
    'internal',
    'join',
    'kill',
    'sensitive',
    'tap',
    'win',
    'attack',
    'claim',
    'constant',
    'drag',
    'drink',
    'guess',
    'minor',
    'pull',
    'raw',
    'soft',
    'solid',
    'wear',
    'weird',
    'wonder',
    'annual',
    'count',
    'dead',
    'doubt',
    'feed',
    'forever',
    'impress',
    'nobody',
    'repeat',
    'round',
    'sing',
    'slide',
    'strip',
    'whereas',
    'wish',
    'combine',
    'command',
    'dig',
    'divide',
    'equivalent',
    'hang',
    'hunt',
    'initial',
    'march',
    'mention',
    'spiritual',
    'survey',
    'tie',
    'adult',
    'brief',
    'crazy',
    'escape',
    'gather',
    'hate',
    'prior',
    'repair',
    'rough',
    'sad',
    'scratch',
    'sick',
    'strike',
    'employ',
    'external',
    'hurt',
    'illegal',
    'laugh',
    'lay',
    'mobile',
    'nasty',
    'ordinary',
    'respond',
    'royal',
    'senior',
    'split',
    'strain',
    'struggle',
    'swim',
    'train',
    'upper',
    'wash',
    'yellow',
    'convert',
    'crash',
    'dependent',
    'fold',
    'funny',
    'grab',
    'hide',
    'miss',
    'permit',
    'quote',
    'recover',
    'resolve',
    'roll',
    'sink',
    'slip',
    'spare',
    'suspect',
    'sweet',
    'swing',
    'twist',
    'upstairs',
    'usual',
    'abroad',
    'brave',
    'calm',
    'concentrate',
    'estimate',
    'grand',
    'male',
    'mine',
    'prompt',
    'quiet',
    'refuse',
    'regret',
    'reveal',
    'rush',
    'shake',
    'shift',
    'shine',
    'steal',
    'suck',
    'surround',
    'anybody',
    'bear',
    'brilliant',
    'dare',
    'dear',
    'delay',
    'drunk',
    'female',
    'hurry',
    'inevitable',
    'invite',
    'kiss',
    'neat',
    'pop',
    'punch',
    'quit',
    'reply',
    'representative',
    'resist',
    'rip',
    'rub',
    'silly',
    'smile',
    'spell',
    'stretch',
    'stupid',
    'tear',
    'temporary',
    'tomorrow',
    'wake',
    'wrap',
    'yesterday',
]

names = [
    'Liam',
    'Noah',
    'Oliver',
    'William',
    'Elijah',
    'James',
    'Benjamin',
    'Lucas',
    'Mason',
    'Ethan',
    'Alexander',
    'Henry',
    'Jacob',
    'Michael',
    'Daniel',
    'Logan',
    'Jackson',
    'Sebastian',
    'Jack',
    'Aiden',
    'Owen',
    'Samuel',
    'Matthew',
    'Joseph',
    'Levi',
    'Mateo',
    'David',
    'John',
    'Wyatt',
    'Carter',
    'Julian',
    'Luke',
    'Grayson',
    'Isaac',
    'Jayden',
    'Theodore',
    'Gabriel',
    'Anthony',
    'Dylan',
    'Leo',
    'Lincoln',
    'Jaxon',
    'Asher',
    'Christopher',
    'Josiah',
    'Andrew',
    'Thomas',
    'Joshua',
    'Ezra',
    'Hudson',
    'Charles',
    'Caleb',
    'Isaiah',
    'Ryan',
    'Nathan',
    'Adrian',
    'Christian',
    'Maverick',
    'Colton',
    'Elias',
    'Aaron',
    'Eli',
    'Landon',
    'Jonathan',
    'Nolan',
    'Hunter',
    'Cameron',
    'Connor',
    'Santiago',
    'Jeremiah',
    'Ezekiel',
    'Angel',
    'Roman',
    'Easton',
    'Miles',
    'Robert',
    'Jameson',
    'Nicholas',
    'Greyson',
    'Cooper',
    'Ian',
    'Carson',
    'Axel',
    'Jaxson',
    'Dominic',
    'Leonardo',
    'Luca',
    'Austin',
    'Jordan',
    'Adam',
    'Xavier',
    'Jose',
    'Jace',
    'Everett',
    'Declan',
    'Evan',
    'Kayden',
    'Parker',
    'Wesley',
    'Kai',
    'Brayden',
    'Bryson',
    'Weston',
    'Jason',
    'Emmett',
    'Sawyer',
    'Silas',
    'Bennett',
    'Brooks',
    'Micah',
    'Damian',
    'Harrison',
    'Waylon',
    'Ayden',
    'Vincent',
    'Ryder',
    'Kingston',
    'Rowan',
    'George',
    'Luis',
    'Chase',
    'Cole',
    'Nathaniel',
    'Zachary',
    'Ashton',
    'Braxton',
    'Gavin',
    'Tyler',
    'Diego',
    'Bentley',
    'Amir',
    'Beau',
    'Gael',
    'Carlos',
    'Ryker',
    'Jasper',
    'Max',
    'Juan',
    'Ivan',
    'Brandon',
    'Jonah',
    'Giovanni',
    'Kaiden',
    'Myles',
    'Calvin',
    'Lorenzo',
    'Maxwell',
    'Jayce',
    'Kevin',
    'Legend',
    'Tristan',
    'Jesus',
    'Jude',
    'Zion',
    'Justin',
    'Maddox',
    'Abel',
    'King',
    'Camden',
    'Elliott',
    'Malachi',
    'Milo',
    'Emmanuel',
    'Karter',
    'Rhett',
    'Alex',
    'August',
    'River',
    'Xander',
    'Antonio',
    'Brody',
    'Finn',
    'Elliot',
    'Dean',
    'Emiliano',
    'Eric',
    'Miguel',
    'Arthur',
    'Matteo',
    'Graham',
    'Alan',
    'Nicolas',
    'Blake',
    'Thiago',
    'Adriel',
    'Victor',
    'Joel',
    'Timothy',
    'Hayden',
    'Judah',
    'Abraham',
    'Edward',
    'Messiah',
    'Zayden',
    'Theo',
    'Tucker',
    'Grant',
    'Richard',
    'Alejandro',
    'Steven',
    'Jesse',
    'Dawson',
    'Bryce',
    'Avery',
    'Oscar',
    'Patrick',
    'Archer',
    'Barrett',
    'Leon',
    'Colt',
    'Charlie',
    'Peter',
    'Kaleb',
    'Lukas',
    'Beckett',
    'Jeremy',
    'Preston',
    'Enzo',
    'Luka',
    'Andres',
    'Marcus',
    'Felix',
    'Mark',
    'Ace',
    'Brantley',
    'Atlas',
    'Remington',
    'Maximus',
    'Matias',
    'Walker',
    'Kyrie',
    'Griffin',
    'Kenneth',
    'Israel',
    'Javier',
    'Kyler',
    'Jax',
    'Amari',
    'Zane',
    'Emilio',
    'Knox',
    'Adonis',
    'Aidan',
    'Kaden',
    'Paul',
    'Omar',
    'Brian',
    'Louis',
    'Caden',
    'Maximiliano',
    'Holden',
    'Paxton',
    'Nash',
    'Bradley',
    'Bryan',
    'Simon',
    'Phoenix',
    'Lane',
    'Josue',
    'Colin',
    'Rafael',
    'Kyle',
    'Riley',
    'Jorge',
    'Beckham',
    'Cayden',
    'Jaden',
    'Emerson',
    'Ronan',
    'Karson',
    'Arlo',
    'Tobias',
    'Brady',
    'Clayton',
    'Francisco',
    'Zander',
    'Erick',
    'Walter',
    'Daxton',
    'Cash',
    'Martin',
    'Damien',
    'Dallas',
    'Cody',
    'Chance',
    'Jensen',
    'Finley',
    'Jett',
    'Corbin',
    'Kash',
    'Reid',
    'Kameron',
    'Andre',
    'Gunner',
    'Jake',
    'Hayes',
    'Manuel',
    'Prince',
    'Bodhi',
    'Cohen',
    'Sean',
    'Khalil',
    'Hendrix',
    'Derek',
    'Cristian',
    'Cruz',
    'Kairo',
    'Dante',
    'Atticus',
    'Killian',
    'Stephen',
    'Orion',
    'Malakai',
    'Ali',
    'Eduardo',
    'Fernando',
    'Anderson',
    'Angelo',
    'Spencer',
    'Gideon',
    'Mario',
    'Titus',
    'Travis',
    'Rylan',
    'Kayson',
    'Ricardo',
    'Tanner',
    'Malcolm',
    'Raymond',
    'Odin',
    'Cesar',
    'Lennox',
    'Joaquin',
    'Kane',
    'Wade',
    'Muhammad',
    'Iker',
    'Jaylen',
    'Crew',
    'Zayn',
    'Hector',
    'Ellis',
    'Leonel',
    'Cairo',
    'Garrett',
    'Romeo',
    'Dakota',
    'Edwin',
    'Warren',
    'Julius',
    'Major',
    'Donovan',
    'Caiden',
    'Tyson',
    'Nico',
    'Sergio',
    'Nasir',
    'Rory',
    'Devin',
    'Jaiden',
    'Jared',
    'Kason',
    'Malik',
    'Jeffrey',
    'Ismael',
    'Elian',
    'Marshall',
    'Lawson',
    'Desmond',
    'Winston',
    'Nehemiah',
    'Ari',
    'Conner',
    'Jay',
    'Kade',
    'Andy',
    'Johnny',
    'Jayceon',
    'Marco',
    'Seth',
    'Ibrahim',
    'Raiden',
    'Collin',
    'Edgar',
    'Erik',
    'Troy',
    'Clark',
    'Jaxton',
    'Johnathan',
    'Gregory',
    'Russell',
    'Royce',
    'Fabian',
    'Ezequiel',
    'Noel',
    'Pablo',
    'Cade',
    'Pedro',
    'Sullivan',
    'Trevor',
    'Reed',
    'Quinn',
    'Frank',
    'Harvey',
    'Princeton',
    'Zayne',
    'Matthias',
    'Conor',
    'Sterling',
    'Dax',
    'Grady',
    'Cyrus',
    'Gage',
    'Leland',
    'Solomon',
    'Emanuel',
    'Niko',
    'Ruben',
    'Kasen',
    'Mathias',
    'Kashton',
    'Franklin',
    'Remy',
    'Shane',
    'Kendrick',
    'Shawn',
    'Otto',
    'Armani',
    'Keegan',
    'Finnegan',
    'Memphis',
    'Bowen',
    'Dominick',
    'Kolton',
    'Jamison',
    'Allen',
    'Philip',
    'Tate',
    'Peyton',
    'Jase',
    'Oakley',
    'Rhys',
    'Kyson',
    'Adan',
    'Esteban',
    'Dalton',
    'Gianni',
    'Callum',
    'Sage',
    'Alexis',
    'Milan',
    'Moises',
    'Jonas',
    'Uriel',
    'Colson',
    'Marcos',
    'Zaiden',
    'Hank',
    'Damon',
    'Hugo',
    'Ronin',
    'Royal',
    'Kamden',
    'Dexter',
    'Luciano',
    'Alonzo',
    'Augustus',
    'Kamari',
    'Eden',
    'Roberto',
    'Baker',
    'Bruce',
    'Kian',
    'Albert',
    'Frederick',
    'Mohamed',
    'Abram',
    'Omari',
    'Porter',
    'Enrique',
    'Alijah',
    'Francis',
    'Leonidas',
    'Zachariah',
    'Landen',
    'Wilder',
    'Apollo',
    'Santino',
    'Tatum',
    'Pierce',
    'Forrest',
    'Corey',
    'Derrick',
    'Isaias',
    'Kaison',
    'Kieran',
    'Arjun',
    'Gunnar',
    'Rocco',
    'Emmitt',
    'Abdiel',
    'Braylen',
    'Maximilian',
    'Skyler',
    'Phillip',
    'Benson',
    'Cannon',
    'Deacon',
    'Dorian',
    'Asa',
    'Moses',
    'Ayaan',
    'Jayson',
    'Raul',
    'Briggs',
    'Armando',
    'Nikolai',
    'Cassius',
    'Drew',
    'Rodrigo',
    'Raphael',
    'Danny',
    'Conrad',
    'Moshe',
    'Zyaire',
    'Julio',
    'Casey',
    'Ronald',
    'Scott',
    'Callan',
    'Roland',
    'Saul',
    'Jalen',
    'Brycen',
    'Ryland',
    'Lawrence',
    'Davis',
    'Rowen',
    'Zain',
    'Ermias',
    'Jaime',
    'Duke',
    'Stetson',
    'Alec',
    'Yusuf',
    'Case',
    'Trenton',
    'Callen',
    'Ariel',
    'Jasiah',
    'Soren',
    'Dennis',
    'Donald',
    'Keith',
    'Izaiah',
    'Lewis',
    'Kylan',
    'Kobe',
    'Makai',
    'Rayan',
    'Ford',
    'Zaire',
    'Landyn',
    'Roy',
    'Bo',
    'Chris',
    'Jamari',
    'Ares',
    'Mohammad',
    'Darius',
    'Drake',
    'Tripp',
    'Marcelo',
    'Samson',
    'Dustin',
    'Layton',
    'Gerardo',
    'Johan',
    'Kaysen',
    'Keaton',
    'Reece',
    'Chandler',
    'Lucca',
    'Mack',
    'Baylor',
    'Kannon',
    'Marvin',
    'Huxley',
    'Nixon',
    'Tony',
    'Cason',
    'Mauricio',
    'Quentin',
    'Edison',
    'Quincy',
    'Ahmed',
    'Finnley',
    'Justice',
    'Taylor',
    'Gustavo',
    'Brock',
    'Ahmad',
    'Kyree',
    'Arturo',
    'Nikolas',
    'Boston',
    'Sincere',
    'Alessandro',
    'Braylon',
    'Colby',
    'Leonard',
    'Ridge',
    'Trey',
    'Aden',
    'Leandro',
    'Sam',
    'Uriah',
    'Ty',
    'Sylas',
    'Axton',
    'Issac',
    'Fletcher',
    'Julien',
    'Wells',
    'Alden',
    'Vihaan',
    'Jamir',
    'Valentino',
    'Shepherd',
    'Keanu',
    'Hezekiah',
    'Lionel',
    'Kohen',
    'Zaid',
    'Alberto',
    'Neil',
    'Denver',
    'Aarav',
    'Brendan',
    'Dillon',
    'Koda',
    'Sutton',
    'Kingsley',
    'Sonny',
    'Alfredo',
    'Wilson',
    'Harry',
    'Jaziel',
    'Salvador',
    'Cullen',
    'Hamza',
    'Dariel',
    'Rex',
    'Zeke',
    'Mohammed',
    'Nelson',
    'Boone',
    'Ricky',
    'Santana',
    'Cayson',
    'Lance',
    'Raylan',
    'Lucian',
    'Eliel',
    'Alvin',
    'Jagger',
    'Braden',
    'Curtis',
    'Mathew',
    'Jimmy',
    'Kareem',
    'Archie',
    'Amos',
    'Quinton',
    'Yosef',
    'Bodie',
    'Jerry',
    'Langston',
    'Axl',
    'Stanley',
    'Clay',
    'Douglas',
    'Layne',
    'Titan',
    'Tomas',
    'Houston',
    'Darren',
    'Lachlan',
    'Kase',
    'Korbin',
    'Leighton',
    'Joziah',
    'Samir',
    'Watson',
    'Colten',
    'Roger',
    'Shiloh',
    'Tommy',
    'Mitchell',
    'Azariah',
    'Noe',
    'Talon',
    'Deandre',
    'Lochlan',
    'Joe',
    'Carmelo',
    'Otis',
    'Randy',
    'Byron',
    'Chaim',
    'Lennon',
    'Devon',
    'Nathanael',
    'Bruno',
    'Aryan',
    'Flynn',
    'Vicente',
    'Brixton',
    'Kyro',
    'Brennan',
    'Casen',
    'Kenzo',
    'Orlando',
    'Castiel',
    'Rayden',
    'Ben',
    'Grey',
    'Jedidiah',
    'Tadeo',
    'Morgan',
    'Augustine',
    'Mekhi',
    'Abdullah',
    'Ramon',
    'Saint',
    'Emery',
    'Maurice',
    'Jefferson',
    'Maximo',
    'Koa',
    'Ray',
    'Jamie',
    'Eddie',
    'Guillermo',
    'Onyx',
    'Thaddeus',
    'Wayne',
    'Hassan',
    'Alonso',
    'Dash',
    'Elisha',
    'Jaxxon',
    'Rohan',
    'Carl',
    'Kelvin',
    'Jon',
    'Larry',
    'Reese',
    'Aldo',
    'Marcel',
    'Melvin',
    'Yousef',
    'Aron',
    'Kace',
    'Vincenzo',
    'Kellan',
    'Miller',
    'Jakob',
    'Reign',
    'Kellen',
    'Kristopher',
    'Ernesto',
    'Briar',
    'Gary',
    'Trace',
    'Joey',
    'Clyde',
    'Enoch',
    'Jaxx',
    'Crosby',
    'Magnus',
    'Fisher',
    'Jadiel',
    'Bronson',
    'Eugene',
    'Lee',
    'Brecken',
    'Atreus',
    'Madden',
    'Khari',
    'Caspian',
    'Ishaan',
    'Kristian',
    'Westley',
    'Hugh',
    'Kamryn',
    'Musa',
    'Rey',
    'Thatcher',
    'Alfred',
    'Emory',
    'Kye',
    'Reyansh',
    'Yahir',
    'Cain',
    'Mordechai',
    'Zayd',
    'Demetrius',
    'Harley',
    'Felipe',
    'Louie',
    'Branson',
    'Graysen',
    'Allan',
    'Kole',
    'Harold',
    'Alvaro',
    'Harlan',
    'Amias',
    'Brett',
    'Khalid',
    'Misael',
    'Westin',
    'Zechariah',
    'Aydin',
    'Kaiser',
    'Lian',
    'Bryant',
    'Junior',
    'Legacy',
    'Ulises',
    'Bellamy',
    'Brayan',
    'Kody',
    'Ledger',
    'Eliseo',
    'Gordon',
    'London',
    'Rocky',
    'Valentin',
    'Terry',
    'Damari',
    'Trent',
    'Bentlee',
    'Canaan',
    'Gatlin',
    'Kiaan',
    'Franco',
    'Eithan',
    'Idris',
    'Krew',
    'Yehuda',
    'Marlon',
    'Rodney',
    'Creed',
    'Salvatore',
    'Stefan',
    'Tristen',
    'Adrien',
    'Jamal',
    'Judson',
    'Camilo',
    'Kenny',
    'Nova',
    'Robin',
    'Rudy',
    'Van',
    'Bjorn',
    'Brodie',
    'Mac',
    'Jacoby',
    'Sekani',
    'Vivaan',
    'Blaine',
    'Ira',
    'Ameer',
    'Dominik',
    'Alaric',
    'Dane',
    'Jeremias',
    'Kyng',
    'Reginald',
    'Bobby',
    'Kabir',
    'Jairo',
    'Alexzander',
    'Benicio',
    'Vance',
    'Wallace',
    'Zavier',
    'Billy',
    'Callahan',
    'Dakari',
    'Gerald',
    'Turner',
    'Bear',
    'Jabari',
    'Cory',
    'Fox',
    'Harlem',
    'Jakari',
    'Jeffery',
    'Maxton',
    'Ronnie',
    'Yisroel',
    'Zakai',
    'Bridger',
    'Remi',
    'Arian',
    'Blaze',
    'Forest',
    'Genesis',
    'Jerome',
    'Reuben',
    'Wesson',
    'Anders',
    'Banks',
    'Calum',
    'Dayton',
    'Kylen',
    'Dangelo',
    'Emir',
    'Malakhi',
    'Salem',
    'Blaise',
    'Tru',
    'Boden',
    'Kolten',
    'Kylo',
    'Aries',
    'Henrik',
    'Kalel',
    'Landry',
    'Marcellus',
    'Zahir',
    'Lyle',
    'Dario',
    'Rene',
    'Terrance',
    'Xzavier',
    'Alfonso',
    'Darian',
    'Kylian',
    'Maison',
    'Foster',
    'Keenan',
    'Yahya',
    'Heath',
    'Javion',
    'Jericho',
    'Aziel',
    'Darwin',
    'Marquis',
    'Mylo',
    'Ambrose',
    'Anakin',
    'Jordy',
    'Juelz',
    'Toby',
    'Yael',
    'Azrael',
    'Brentley',
    'Tristian',
    'Bode',
    'Jovanni',
    'Santos',
    'Alistair',
    'Braydon',
    'Kamdyn',
    'Marc',
    'Mayson',
    'Niklaus',
    'Simeon',
    'Colter',
    'Davion',
    'Leroy',
    'Ayan',
    'Dilan',
    'Ephraim',
    'Anson',
    'Merrick',
    'Wes',
    'Will',
    'Jaxen',
    'Maxim',
    'Howard',
    'Jad',
    'Jesiah',
    'Ignacio',
    'Zyon',
    'Ahmir',
    'Jair',
    'Mustafa',
    'Jermaine',
    'Yadiel',
    'Aayan',
    'Dhruv',
    'Seven',
    'Stone',
    'Rome',
        'Olivia',
    'Emma',
    'Ava',
    'Sophia',
    'Isabella',
    'Charlotte',
    'Amelia',
    'Mia',
    'Harper',
    'Evelyn',
    'Abigail',
    'Emily',
    'Ella',
    'Elizabeth',
    'Camila',
    'Luna',
    'Sofia',
    'Avery',
    'Mila',
    'Aria',
    'Scarlett',
    'Penelope',
    'Layla',
    'Chloe',
    'Victoria',
    'Madison',
    'Eleanor',
    'Grace',
    'Nora',
    'Riley',
    'Zoey',
    'Hannah',
    'Hazel',
    'Lily',
    'Ellie',
    'Violet',
    'Lillian',
    'Zoe',
    'Stella',
    'Aurora',
    'Natalie',
    'Emilia',
    'Everly',
    'Leah',
    'Aubrey',
    'Willow',
    'Addison',
    'Lucy',
    'Audrey',
    'Bella',
    'Nova',
    'Brooklyn',
    'Paisley',
    'Savannah',
    'Claire',
    'Skylar',
    'Isla',
    'Genesis',
    'Naomi',
    'Elena',
    'Caroline',
    'Eliana',
    'Anna',
    'Maya',
    'Valentina',
    'Ruby',
    'Kennedy',
    'Ivy',
    'Ariana',
    'Aaliyah',
    'Cora',
    'Madelyn',
    'Alice',
    'Kinsley',
    'Hailey',
    'Gabriella',
    'Allison',
    'Gianna',
    'Serenity',
    'Samantha',
    'Sarah',
    'Autumn',
    'Quinn',
    'Eva',
    'Piper',
    'Sophie',
    'Sadie',
    'Delilah',
    'Josephine',
    'Nevaeh',
    'Adeline',
    'Arya',
    'Emery',
    'Lydia',
    'Clara',
    'Vivian',
    'Madeline',
    'Peyton',
    'Julia',
    'Rylee',
    'Brielle',
    'Reagan',
    'Natalia',
    'Jade',
    'Athena',
    'Maria',
    'Leilani',
    'Everleigh',
    'Liliana',
    'Melanie',
    'Mackenzie',
    'Hadley',
    'Raelynn',
    'Kaylee',
    'Rose',
    'Arianna',
    'Isabelle',
    'Melody',
    'Eliza',
    'Lyla',
    'Katherine',
    'Aubree',
    'Adalynn',
    'Kylie',
    'Faith',
    'Mary',
    'Margaret',
    'Ximena',
    'Iris',
    'Alexandra',
    'Jasmine',
    'Charlie',
    'Amaya',
    'Taylor',
    'Isabel',
    'Ashley',
    'Khloe',
    'Ryleigh',
    'Alexa',
    'Amara',
    'Valeria',
    'Andrea',
    'Parker',
    'Norah',
    'Eden',
    'Elliana',
    'Brianna',
    'Emersyn',
    'Valerie',
    'Anastasia',
    'Eloise',
    'Emerson',
    'Cecilia',
    'Remi',
    'Josie',
    'Alina',
    'Reese',
    'Bailey',
    'Lucia',
    'Adalyn',
    'Molly',
    'Ayla',
    'Sara',
    'Daisy',
    'London',
    'Jordyn',
    'Esther',
    'Genevieve',
    'Harmony',
    'Annabelle',
    'Alyssa',
    'Ariel',
    'Aliyah',
    'Londyn',
    'Juliana',
    'Morgan',
    'Summer',
    'Juliette',
    'Trinity',
    'Callie',
    'Sienna',
    'Blakely',
    'Alaia',
    'Kayla',
    'Teagan',
    'Alaina',
    'Brynlee',
    'Finley',
    'Catalina',
    'Sloane',
    'Rachel',
    'Lilly',
    'Ember',
    'Kimberly',
    'Juniper',
    'Sydney',
    'Arabella',
    'Gemma',
    'Jocelyn',
    'Freya',
    'June',
    'Lauren',
    'Amy',
    'Presley',
    'Georgia',
    'Journee',
    'Elise',
    'Rosalie',
    'Ada',
    'Laila',
    'Brooke',
    'Diana',
    'Olive',
    'River',
    'Payton',
    'Ariella',
    'Daniela',
    'Raegan',
    'Alayna',
    'Gracie',
    'Mya',
    'Blake',
    'Noelle',
    'Ana',
    'Leila',
    'Paige',
    'Lila',
    'Nicole',
    'Rowan',
    'Hope',
    'Ruth',
    'Alana',
    'Selena',
    'Marley',
    'Kamila',
    'Alexis',
    'Mckenzie',
    'Zara',
    'Millie',
    'Magnolia',
    'Kali',
    'Kehlani',
    'Catherine',
    'Maeve',
    'Adelyn',
    'Sawyer',
    'Elsie',
    'Lola',
    'Jayla',
    'Adriana',
    'Journey',
    'Vera',
    'Aspen',
    'Joanna',
    'Alivia',
    'Angela',
    'Dakota',
    'Camille',
    'Nyla',
    'Tessa',
    'Brooklynn',
    'Malia',
    'Makayla',
    'Rebecca',
    'Fiona',
    'Mariana',
    'Lena',
    'Julianna',
    'Vanessa',
    'Juliet',
    'Camilla',
    'Kendall',
    'Harley',
    'Cali',
    'Evangeline',
    'Mariah',
    'Jane',
    'Zuri',
    'Elaina',
    'Sage',
    'Amira',
    'Adaline',
    'Lia',
    'Charlee',
    'Delaney',
    'Lilah',
    'Miriam',
    'Angelina',
    'Mckenna',
    'Aniyah',
    'Phoebe',
    'Michelle',
    'Thea',
    'Hayden',
    'Maggie',
    'Lucille',
    'Amiyah',
    'Annie',
    'Alexandria',
    'Myla',
    'Vivienne',
    'Kiara',
    'Alani',
    'Margot',
    'Adelaide',
    'Briella',
    'Brynn',
    'Saylor',
    'Destiny',
    'Amari',
    'Evelynn',
    'Haven',
    'Phoenix',
    'Izabella',
    'Kaia',
    'Lilliana',
    'Harlow',
    'Alessandra',
    'Madilyn',
    'Nina',
    'Logan',
    'Adelynn',
    'Amina',
    'Kate',
    'Fatima',
    'Samara',
    'Winter',
    'Giselle',
    'Evie',
    'Arielle',
    'Jessica',
    'Talia',
    'Leia',
    'Gabriela',
    'Gracelyn',
    'Lexi',
    'Laura',
    'Makenzie',
    'Melissa',
    'Royalty',
    'Rylie',
    'Raelyn',
    'Gabrielle',
    'Paris',
    'Daleyza',
    'Joy',
    'Maisie',
    'Oakley',
    'Ariyah',
    'Kailani',
    'Alayah',
    'Stephanie',
    'Amora',
    'Willa',
    'Gracelynn',
    'Elle',
    'Keira',
    'Tatum',
    'Veronica',
    'Milani',
    'Felicity',
    'Paislee',
    'Allie',
    'Nylah',
    'Ariah',
    'Cassidy',
    'Lyric',
    'Madeleine',
    'Miracle',
    'Gwendolyn',
    'Octavia',
    'Dahlia',
    'Heidi',
    'Celeste',
    'Remington',
    'Makenna',
    'Everlee',
    'Scarlet',
    'Esmeralda',
    'Maci',
    'Lainey',
    'Jacqueline',
    'Kira',
    'Lana',
    'Brinley',
    'Demi',
    'Ophelia',
    'Lennon',
    'Reign',
    'Bristol',
    'Sabrina',
    'Alaya',
    'Jennifer',
    'Kenzie',
    'Angel',
    'Luciana',
    'Anaya',
    'Hallie',
    'Ryan',
    'Camryn',
    'Kinley',
    'Daniella',
    'Lilith',
    'Blair',
    'Amanda',
    'Collins',
    'Jordan',
    'Maliyah',
    'Rosemary',
    'Cataleya',
    'Kaylani',
    'Gia',
    'Alison',
    'Leighton',
    'Nadia',
    'Sutton',
    'Carolina',
    'Skye',
    'Alicia',
    'Regina',
    'Viviana',
    'Yaretzi',
    'Heaven',
    'Serena',
    'Raven',
    'Emely',
    'Carmen',
    'Wren',
    'Helen',
    'Charleigh',
    'Danielle',
    'Daphne',
    'Esme',
    'Nayeli',
    'Maddison',
    'Sarai',
    'Dylan',
    'Frances',
    'Elisa',
    'Mabel',
    'Skyler',
    'Jenna',
    'Emelia',
    'Kaitlyn',
    'Miranda',
    'Marlee',
    'Matilda',
    'Selah',
    'Jolene',
    'Wynter',
    'Hattie',
    'Bianca',
    'Haley',
    'Lorelei',
    'Mira',
    'Braelynn',
    'Annalise',
    'Madelynn',
    'Katie',
    'Palmer',
    'Aylin',
    'Elliott',
    'Kyla',
    'Rory',
    'Avianna',
    'Liana',
    'Shiloh',
    'Kalani',
    'Jada',
    'Kelsey',
    'Elianna',
    'Jimena',
    'Kora',
    'Kamryn',
    'Ainsley',
    'Averie',
    'Kensley',
    'Helena',
    'Holly',
    'Emory',
    'Macie',
    'Amber',
    'Zariah',
    'Erin',
    'Eve',
    'Kathryn',
    'Renata',
    'Kayleigh',
    'Emmy',
    'Celine',
    'Francesca',
    'Fernanda',
    'April',
    'Shelby',
    'Poppy',
    'Colette',
    'Meadow',
    'Nia',
    'Sierra',
    'Cheyenne',
    'Edith',
    'Oaklynn',
    'Kennedi',
    'Abby',
    'Danna',
    'Jazlyn',
    'Alessia',
    'Mikayla',
    'Alondra',
    'Addilyn',
    'Leona',
    'Mckinley',
    'Carter',
    'Maren',
    'Sylvia',
    'Alejandra',
    'Ariya',
    'Astrid',
    'Adrianna',
    'Charli',
    'Imani',
    'Maryam',
    'Christina',
    'Stevie',
    'Maia',
    'Adelina',
    'Dream',
    'Aisha',
    'Alanna',
    'Itzel',
    'Azalea',
    'Katelyn',
    'Kylee',
    'Leslie',
    'Madilynn',
    'Myra',
    'Virginia',
    'Remy',
    'Hanna',
    'Aleah',
    'Jaliyah',
    'Antonella',
    'Aviana',
    'Cameron',
    'Chelsea',
    'Cecelia',
    'Alia',
    'Mae',
    'Cadence',
    'Emberly',
    'Charley',
    'Janelle',
    'Mallory',
    'Kaliyah',
    'Elaine',
    'Gloria',
    'Jayleen',
    'Lorelai',
    'Malaysia',
    'Bethany',
    'Briana',
    'Beatrice',
    'Dorothy',
    'Rosie',
    'Jemma',
    'Noa',
    'Carly',
    'Mariam',
    'Anne',
    'Karina',
    'Emmalyn',
    'Ivory',
    'Ivanna',
    'Jamie',
    'Kara',
    'Aitana',
    'Jayda',
    'Justice',
    'Meredith',
    'Briar',
    'Skyla',
    'Khaleesi',
    'Dayana',
    'Julieta',
    'Katalina',
    'Kendra',
    'Oaklyn',
    'Ashlyn',
    'Armani',
    'Jazmin',
    'Kyra',
    'Angelica',
    'Zahra',
    'Dallas',
    'Johanna',
    'Elliot',
    'Macy',
    'Monroe',
    'Kimber',
    'Henley',
    'Ari',
    'Karsyn',
    'Lyanna',
    'Lilian',
    'Amalia',
    'Nola',
    'Dior',
    'Aleena',
    'Megan',
    'Michaela',
    'Amirah',
    'Cassandra',
    'Melany',
    'Legacy',
    'Reyna',
    'Alma',
    'Emmie',
    'Melina',
    'Siena',
    'Priscilla',
    'Ashlynn',
    'Savanna',
    'Sloan',
    'Tiana',
    'Aubrie',
    'Coraline',
    'Reina',
    'Allyson',
    'Kaydence',
    'Sasha',
    'Julie',
    'Alexia',
    'Irene',
    'Marilyn',
    'Greta',
    'Braelyn',
    'Emerie',
    'Lylah',
    'Nalani',
    'Monica',
    'Aileen',
    'Lauryn',
    'Anahi',
    'Aurelia',
    'Kassidy',
    'Rayna',
    'Romina',
    'Lillie',
    'Marie',
    'Rosa',
    'Saige',
    'Bonnie',
    'Kelly',
    'Xiomara',
    'Annabella',
    'Avah',
    'Lacey',
    'Anya',
    'Liberty',
    'Karen',
    'Mercy',
    'Zelda',
    'Baylee',
    'Chaya',
    'Kenna',
    'Roselyn',
    'Liv',
    'Mara',
    'Ensley',
    'Malani',
    'Malaya',
    'Hadassah',
    'Lyra',
    'Adley',
    'Galilea',
    'Jaylah',
    'Karla',
    'Nala',
    'Opal',
    'Aliza',
    'Milena',
    'Ailani',
    'Louisa',
    'Mina',
    'Kairi',
    'Clementine',
    'Louise',
    'Maleah',
    'Janiyah',
    'Marina',
    'Anika',
    'Julissa',
    'Bailee',
    'Hayley',
    'Jessie',
    'Laney',
    'Eileen',
    'Faye',
    'Kynlee',
    'Tiffany',
    'Lara',
    'Angie',
    'Joelle',
    'Rhea',
    'Calliope',
    'Jazmine',
    'Amani',
    'Haylee',
    'Aliana',
    'Leyla',
    'Jolie',
    'Kinslee',
    'Ryann',
    'Simone',
    'Milan',
    'Lennox',
    'Treasure',
    'Alora',
    'Ellis',
    'Rebekah',
    'Mikaela',
    'Lina',
    'Harmoni',
    'Yareli',
    'Giuliana',
    'Lea',
    'Harlee',
    'Elyse',
    'Frida',
    'Blaire',
    'Aya',
    'Laurel',
    'Meghan',
    'Pearl',
    'Zaylee',
    'Alena',
    'Holland',
    'Bria',
    'Rayne',
    'Bridget',
    'Zariyah',
    'Kori',
    'Frankie',
    'Clarissa',
    'Brylee',
    'Davina',
    'Rivka',
    'Cynthia',
    'Zaria',
    'Madalyn',
    'Paula',
    'Salem',
    'Amelie',
    'Madisyn',
    'Vienna',
    'Haisley',
    'Ainhoa',
    'Journi',
    'Karter',
    'Oaklee',
    'Livia',
    'Miley',
    'Adele',
    'Amaia',
    'Yara',
    'Averi',
    'Emmeline',
    'Kyleigh',
    'Princess',
    'Penny',
    'Sariyah',
    'Amayah',
    'Crystal',
    'Keyla',
    'Lilyana',
    'Linda',
    'Aniya',
    'Marianna',
    'Alaiya',
    'Noemi',
    'Chanel',
    'Estella',
    'Isabela',
    'Jillian',
    'Kallie',
    'Ellianna',
    'Elsa',
    'Itzayana',
    'Zora',
    'Estelle',
    'Chana',
    'Raina',
    'Royal',
    'Sunny',
    'Estrella',
    'Martha',
    'Ellen',
    'Kailey',
    'Maxine',
    'Clare',
    'Teresa',
    'Annika',
    'Kamilah',
    'Azariah',
    'Della',
    'Addyson',
    'Kai',
    'Lilianna',
    'Tinsley',
    'Yaritza',
    'Navy',
    'Winnie',
    'Andi',
    'Kamiyah',
    'Waverly',
    'Sky',
    'Amaris',
    'Ramona',
    'Saoirse',
    'Hana',
    'Judith',
    'Halle',
    'Laylah',
    'Novalee',
    'Jaycee',
    'Zaniyah',
    'Alianna',
    'Paulina',
    'Jayde',
    'Thalia',
    'Giovanna',
    'Gwen',
    'Iliana',
    'Elora',
    'Ezra',
    'Kaylie',
    'Braylee',
    'Mavis',
    'Ellison',
    'Margo',
    'Mylah',
    'Paisleigh',
    'Analia',
    'August',
    'Brittany',
    'Kaisley',
    'Belen',
    'Promise',
    'Amiya',
    'Dalary',
    'Veda',
    'Alisson',
    'Keilani',
    'Oakleigh',
    'Guadalupe',
    'Leanna',
    'Rosalyn',
    'Selene',
    'Theodora',
    'Kamari',
    'Anais',
    'Elodie',
    'Celia',
    'Dani',
    'Hunter',
    'Indie',
    'Kenia',
    'Nellie',
    'Belle',
    'Kataleya',
    'Lexie',
    'Miah',
    'Rylan',
    'Sylvie',
    'Valery',
    'Addilynn',
    'Dulce',
    'Marissa',
    'Meilani',
    'Natasha',
    'Jaylee',
    'Kimora',
    'Raquel',
    'Scarlette',
    'Aliya',
    'Nataly',
    'Whitney',
    'Corinne',
    'Denver',
    'Nathalie',
    'Kiera',
    'Milana',
    'Vada',
    'Violeta',
    'Luz',
    'Addisyn',
    'Casey',
    'Deborah',
    'Tori',
    'Zainab',
    'Erika',
    'Jenesis',
    'Avalynn',
    'Nancy',
    'Emmalynn',
    'Hadlee',
    'Heavenly',
    'Aubrielle',
    'Elisabeth',
    'Salma',
    'Adalee',
    'Landry',
    'Malayah',
    'Novah',
    'Egypt',
    'Ayleen',
    'Blessing',
    'Elina',
    'Joyce',
    'Myah',
    'Zoie',
    'Christine',
    'Jaelynn',
    'Persephone',
    'Chandler',
    'Emmaline',
    'Paloma',
    'Harleigh',
    'Noor',
    'Paola',
    'India',
    'Madalynn',
    'Rosalee',
    'Florence',
    'Maliah',
    'Flora',
    'Luella',
    'Patricia',
    'Whitley',
    'Carolyn',
    'Kathleen',
    'Keily',
    'Kiana',
    'Tenley',
    'Alyson',
    'Barbara',
    'Dana',
    'Yasmin',
    'Bexley',
    'Micah',
    'Tatiana',
    'Arden',
    'Aubriella',
    'Lindsey',
    'Emani',
    'Hailee',
    'Lisa',
    'Sevyn',
    'Fallon',
    'Magdalena',
    'Tinley',
    'Halo',
    'Lailah',
    'Arlette',
    'Ansley',
    'Esperanza',
    'Cleo',
    'Aila',
    'Emerald',
    'Jaelyn',
    'Karlee',
    'Kaya',
    'Ingrid',
    'Jewel',
    'Emilee',
    'Giana',
    'Paityn',
    'Zola',
    'Amoura',
    'Renee',
    'Ann',
    'Berkley',
    'Harriet',
    'Queen',
    'Sariah',
    'Beatrix',
    'Sandra',
    'Alannah',
    'Austyn',
    'Freyja',
    'Kaylin',
    'Samira',
    'Taliyah',
    'Hadleigh',
    'Kaiya',
    'Robin',
    'Luisa',
    'Zendaya',
    'Ariadne',
    'Dixie',
]

# generate random integer values
from random import seed
from random import randint
# seed random number generator
seed(1)

if oi == 1:
    f = (int(val)//100)
    d = (f - 2)
    for i in range(d): 
        with open((z), 'a',) as f:
            sys.stdout = f # Change the standard output to the file we created.
            value1 = randint(0, 9)
            value2 = randint(0, 9)
            value3 = randint(0, 9)
            value4 = randint(0, 9)
            print ((email), ":"," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), (value1), sep="")
            print ((email), ":"," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), (value1),(value2),(value3), sep="")
            print ((email), ":"," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":"," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), (value1),(value2), sep="")
            print ((email), ":"," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), (value1),(value2),(value3),(value4), sep="")
            
            print ((email), ":",(value1), " ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":",(value1),(value2),(value3)," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":"," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":",(value1),(value2)," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":",(value1),(value2),(value3),(value4)," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            
            print ((email), ":!"," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), (value1), sep="")
            print ((email), ":!"," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), (value1),(value2),(value3), sep="")
            print ((email), ":!"," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":!"," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), (value1),(value2), sep="")
            print ((email), ":!"," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), (value1),(value2),(value3),(value4), sep="")
            
            print ((email), ":!",(value1), " ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":!",(value1),(value2),(value3)," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":!"," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":!",(value1),(value2)," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":!",(value1),(value2),(value3),(value4)," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            
            print ((email), ":"," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), (value1),"!", sep="")
            print ((email), ":"," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), (value1),(value2),(value3),"!", sep="")
            print ((email), ":"," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), "!",sep="")
            print ((email), ":"," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), (value1),(value2),"!", sep="")
            print ((email), ":"," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), (value1),(value2),(value3),(value4),"!", sep="")
            
            print ((email), ":",(value1), " ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]),"!", sep="")
            print ((email), ":",(value1),(value2),(value3)," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]),"!", sep="")
            print ((email), ":"," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]),"!", sep="")
            print ((email), ":",(value1),(value2)," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]),"!", sep="")
            print ((email), ":",(value1),(value2),(value3),(value4)," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]),"!", sep="")
            
            print ((email), ":?"," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), (value1), sep="")
            print ((email), ":?"," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), (value1),(value2),(value3), sep="")
            print ((email), ":?"," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":?"," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), (value1),(value2), sep="")
            print ((email), ":?"," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), (value1),(value2),(value3),(value4), sep="")
            
            print ((email), ":?",(value1), " ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":?",(value1),(value2),(value3)," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":?"," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":?",(value1),(value2)," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":?",(value1),(value2),(value3),(value4)," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            
            print ((email), ":"," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), (value1),"?", sep="")
            print ((email), ":"," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), (value1),(value2),(value3),"?", sep="")
            print ((email), ":"," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), "?",sep="")
            print ((email), ":"," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), (value1),(value2),"?", sep="")
            print ((email), ":"," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), (value1),(value2),(value3),(value4),"?", sep="")
            
            print ((email), ":",(value1), " ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]),"?", sep="")
            print ((email), ":",(value1),(value2),(value3)," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]),"?", sep="")
            print ((email), ":"," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]),"?", sep="")
            print ((email), ":",(value1),(value2)," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]),"?", sep="")
            print ((email), ":",(value1),(value2),(value3),(value4)," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]),"?", sep="")
            
            print ((email), ":"," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), (value1), sep="")
            print ((email), ":"," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), (value1),(value2),(value3), sep="")
            print ((email), ":"," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":"," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), (value1),(value2), sep="")
            print ((email), ":"," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), (value1),(value2),(value3),(value4), sep="")
            
            print ((email), ":",(value1), " ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":",(value1),(value2),(value3)," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":"," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":",(value1),(value2)," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":",(value1),(value2),(value3),(value4)," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            
            print ((email), ":!"," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), (value1), sep="")
            print ((email), ":!"," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), (value1),(value2),(value3), sep="")
            print ((email), ":!"," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":!"," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), (value1),(value2), sep="")
            print ((email), ":!"," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), (value1),(value2),(value3),(value4), sep="")
            
            print ((email), ":!",(value1), " ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":!",(value1),(value2),(value3)," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":!"," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":!",(value1),(value2)," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":!",(value1),(value2),(value3),(value4)," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            
            print ((email), ":"," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), (value1),"!", sep="")
            print ((email), ":"," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), (value1),(value2),(value3),"!", sep="")
            print ((email), ":"," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), "!",sep="")
            print ((email), ":"," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), (value1),(value2),"!", sep="")
            print ((email), ":"," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), (value1),(value2),(value3),(value4),"!", sep="")
            
            print ((email), ":",(value1), " ".join([names[random.randrange(0, len(nouns))] for i in range(1)]),"!", sep="")
            print ((email), ":",(value1),(value2),(value3)," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]),"!", sep="")
            print ((email), ":"," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]),"!", sep="")
            print ((email), ":",(value1),(value2)," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]),"!", sep="")
            print ((email), ":",(value1),(value2),(value3),(value4)," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]),"!", sep="")
            
            print ((email), ":?"," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), (value1), sep="")
            print ((email), ":?"," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), (value1),(value2),(value3), sep="")
            print ((email), ":?"," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":?"," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), (value1),(value2), sep="")
            print ((email), ":?"," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), (value1),(value2),(value3),(value4), sep="")
            
            print ((email), ":?",(value1), " ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":?",(value1),(value2),(value3)," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":?"," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":?",(value1),(value2)," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":?",(value1),(value2),(value3),(value4)," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            
            print ((email), ":"," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), (value1),"?", sep="")
            print ((email), ":"," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), (value1),(value2),(value3),"?", sep="")
            print ((email), ":"," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), "?",sep="")
            print ((email), ":"," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), (value1),(value2),"?", sep="")
            print ((email), ":"," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), (value1),(value2),(value3),(value4),"?", sep="")
            
            print ((email), ":",(value1), " ".join([names[random.randrange(0, len(nouns))] for i in range(1)]),"?", sep="")
            print ((email), ":",(value1),(value2),(value3)," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]),"?", sep="")
            print ((email), ":"," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]),"?", sep="")
            print ((email), ":",(value1),(value2)," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]),"?", sep="")
            print ((email), ":",(value1),(value2),(value3),(value4)," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]),"?", sep="")
        sys.stdout = original_stdout
if oi == 2:
    f = (int(val)//20)
    d = (f - 10)
    for i in range(d): 
        with open((z), 'a',) as f:
            sys.stdout = f # Change the standard output to the file we created.
            value1 = randint(0, 9)
            value2 = randint(0, 9)
            value3 = randint(0, 9)
            value4 = randint(0, 9)
            print ((email), ":"," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), (value1), sep="")
            print ((email), ":"," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), (value1),(value2),(value3), sep="")
            print ((email), ":"," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":"," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), (value1),(value2), sep="")
            print ((email), ":"," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), (value1),(value2),(value3),(value4), sep="")
            
            print ((email), ":",(value1), " ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":",(value1),(value2),(value3)," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":"," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":",(value1),(value2)," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":",(value1),(value2),(value3),(value4)," ".join([nouns[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            
            print ((email), ":"," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), (value1), sep="")
            print ((email), ":"," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), (value1),(value2),(value3), sep="")
            print ((email), ":"," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":"," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), (value1),(value2), sep="")
            print ((email), ":"," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), (value1),(value2),(value3),(value4), sep="")
            
            print ((email), ":",(value1), " ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":",(value1),(value2),(value3)," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":"," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":",(value1),(value2)," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), sep="")
            print ((email), ":",(value1),(value2),(value3),(value4)," ".join([names[random.randrange(0, len(nouns))] for i in range(1)]), sep="")

        sys.stdout = original_stdout

def prRed(skk): print("\033[91m {}\033[00m" .format(skk))
print("")
print("")
print(Fore.GREEN + 'to generate', Fore.BLUE + (val), Fore.GREEN + 'password(s) it took {0} second(s)!'.format(time.time() - startTime))
time.sleep(1)
print("")
print(Fore.WHITE + "waiting for threads to end...")
#waiting for queue to end
while not workQueue.empty():
   pass
# Notify threads it's time to exit
exitFlag = 1
# Wait for all threads to complete
for t in threads:
   t.join()
print ("Exiting Threads...")
print("")
print("")
ex = input(Fore.RED + "Press Enter to Exit")
print("Exiting...")
time.sleep(2)